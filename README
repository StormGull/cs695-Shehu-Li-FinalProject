BUILDING THE CODE

Our programs are mostly written in Python 3.x. If you run it as an executable
in Linux it will assume your Python is located in /usr/bin/python3. If
you want to run it with another version of Python in your path (like
/usr/local/bin/python3) then run "python3 a3.py" (this is all basic,
but we're just being complete.)

We tested this program on Ubuntu 16.04 with Python version 3.5.2 and
Windows 10 with Python version 3.4.

The program uses some Python modules that are not installed by default, but are
available from pip: igraph, networkx, numpy, matplotlib, and llist.

We also wrote a C++ program to do the geometry for the 3-connected
technique. It relies primarily on the Wykobi library to perform
geometrical calculations. It also uses the lexical_cast and
property_tree libraries. The version we used for Linux is 1.58
(default package version for Ubuntu 16.04;) and for Windows is
1.68. We also had to hack the Boost property_tree files to get it to
work properly with numbers.

We've checked in all the Wykobi code (and changed Boost files) in the
directory wykobi-master. In Linux, you should be able to

cd wykobi-master
make
make install

For Windows 10 we built the C++ file with Microsoft Visual Studio, using
the Developer Command Prompt. This tool is in the Visual Studio folder
with the name "Developer Command Prompt for <Visual Studio version>"
(we used Visual Studio Community 2013). From there, type the following
commands:

cd <wykobi-master folder location>
cl /EHsc /I <boost directory> /Femake-st-numbering make-st-numbering.cpp

Note: /Fe is is the exe output filename - there's no space after it.
/I indicates additional include dictionaries. In this case, we need to
tell it where to find our boost library. Mine is in:
C:\Program Files\boost\boost_1_62_0. So the command looks like:

cl /EHsc /I "C:/Program Files/boost/boost_1_62_0" /Femake-st-numbering make-st-numbering.cpp

There is no compliation required for the boost library, only that it be
downloaded and included (it's entirely headers).

RUNNING THE CODE

The two main programs to run are dbcp_3_connected.py, and dbcp_2_connected.

dbcp_3_connected.py:

Make sure the directory with the compiled make-st-numbering binary is in your path. In Linux,
'export PATH=$PATH:.', and running the program in that directory should suffice, if
you've run "make install" as above to copy the file into place.

The program takes several command line arguments. Here is the help:

$ ./dbcp_3_connected.py -h
usage: dbcp_3_connected.py [-h] [-f F] [-w] [-i]

optional arguments:
  -h, --help  show this help message and exit
  -f F        Graph file to process.
  -w          Write results to disk.
  -i          Save images of solutions to disk.

If you choose -w or -i, the resulting files will be written to
reports/ or images/, respectively. The directories will be created if
necessary.

If you don't select the -i option, the images of the best solutions
will display on the screen. By "best solutions," we mean the best by
power, and the best by partition size. So far they have always been
the same.

dbcp_2_connected.py:

$ ./dbcp_2_connected.py -h
usage: dbcp_2_connected.py [-h] [-f F] [-v] [-q Q] [-w] [-i]

optional arguments:
  -h, --help  show this help message and exit
  -f F        Graph GML file to process.
  -v          Verbose mode.
  -q Q        Q constant to determine how large the subcomponents can be after
              finding a separating pair. Largest component can be (Q-1)/Q *
              |V|.
  -w          Write results to disk.
  -i          Save images of solutions to disk.

The -w and -i options word as above. This program will not pop up an
image if the -i option is not set; so use -i and look in images/ to
see the output.

The -q option is important. For the sample graphs with 16 or fewer
nodes, the default of -q 4 should work. For the 50 node graph, use
-q 10. For the 3040 node graph, use -q 20.

To get a detailed view of the position of the nodes of a 3-connected
graph before they are embedded a circle, run find_x_embedding from the
command line. Here is the help:

$ ./find_x_embedding.py -h
usage: find_x_embedding.py [-h] [-f F] [-v ...] [-p] [-s]

optional arguments:
  -h, --help  show this help message and exit
  -f F        Graph file to process.
  -v ...      Fixed vertices to use. Format: v1 v2 ... vn
  -p          Save images of plot to disk.
  -s          Examine only one X-embedding

Note: find_x_embedding.py will automatically prepend data/ to the file
name, so it is unnecessary to do that.

Be careful when using -v to designate fixed vertices. If vertices
are given that are not in the graph, the program *will* break.

st_ordering.py:

Mostly intended to be imported as a module, but if it is run on the
the command line it will run several unit tests.

DATA

The following data sets are in the data/ directory:

3-connected graphs:

# Random graphs
32-node-random-triconnected.gml
8-node-random-triconnected.gml

# ODGF generated (3-connected graphs of varying sizes)
GMLFile2.gml
GMLFile3.gml
GMLFile4.gml
GMLFile5.gml
GMLFile6.gml
GMLFile7.gml
GMLFile.gml

# Hand created
triangle_graph.txt
pentagon_graph.txt
ring_graph.txt
square_graph.txt

# Strogatz and Watts data. The 4-digit number after "subset_" is the number of nodes.
power_3_connected_subset_0047_18.gml

2-connected graphs:

# Strogatz and Watts data. The 4-digit number after "subset_" is the number of nodes.
power_2_connected_subset_0016_75.gml
power_2_connected_subset_0050_41.gml
power_2_connected_subset_3040_76.gml

DIVISION OF LABOR:

We both worked equally on the assignment.
- For coding, we each wrote the following
<> Paul: dbcp_2_connected.py, dbcp_3_connected.py, make-st-numbering.cpp
<> Katie: find_x_embedding.py, minor additions to dbcp_3_connected
- We also both wrote some side programs to generate random 3-connected graphs for testing
- Paul discovered and generated data files with the Strogatz and Watts Western United States Power
  Grid dataset 
- We both worked on the report and presentation together, focusing primarily on the areas
 that we had implemented. 